You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

code is given below with brute force approach but this approach is not a optimze solution to make optimze we have to use 2 pointer approach 
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxWater=0;
        for(int i=0;i<height.size();i++){
            for(int j=i+1;j<height.size();j++){
                int w=j-i;
                int ht=min(height[i],height[j]);
                int totalWater=w*ht;

                maxWater=max(maxWater, totalWater);

            }
        }
        return maxWater;
    }
};

Now given below the code is optimze with the approach called 2 pointer Approach

class Solution {
public:
    int maxArea(vector<int>& height) {//Time Complexity : O(n)
        int maxWater=0;
        int lp=0, rp = height.size()-1;

        while(lp<rp){
           int w=rp-lp;
            int ht=min(height[lp],height[rp]);
            int CurrentWater=w*ht;
            maxWater=max(maxWater,CurrentWater);
            height[lp]<height[rp] ? lp++ : rp--;
        }
        return maxWater;
    }
};

