You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.

If k > 0, replace the ith number with the sum of the next k numbers.
If k < 0, replace the ith number with the sum of the previous k numbers.
If k == 0, replace the ith number with 0.
As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].

Given the circular array code and an integer key k, return the decrypted code to defuse the bomb!

 

Example 1:

Input: code = [5,7,1,4], k = 3
Output: [12,10,16,13]
Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.
Example 2:

Input: code = [1,2,3,4], k = 0
Output: [0,0,0,0]
Explanation: When k is zero, the numbers are replaced by 0. 
Example 3:

Input: code = [2,4,9,3], k = -2
Output: [12,5,6,13]
Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.
 

Constraints:

n == code.length
1 <= n <= 100
1 <= code[i] <= 100
-(n - 1) <= k <= n - 1








class Solution {
    public int[] decrypt(int[] code, int k) {
        if(k == 0)
        {
            return new int[code.length];
        }
        int window = 0;
        int[] ans = new int[code.length];
        if(k > 0)
        {
            for(int i=1;i<=k;i++)
            {
                window += code[i % code.length];
            }
            for(int i=0;i<code.length;i++)
            {
                ans[i] = window;
                window -= code[(i+1) % code.length];
                window += code[(i + 1 + k) % code.length];
            }
        }
        else if(k < 0)
        {
            for(int i=k;i<0;i++)
            {
                window += code[(code.length + i) % code.length];
            }
            for(int i=0;i<code.length;i++)
            {
                ans[i] = window;
                window -= code[(code.length + i + k) % code.length];
                window += code[i % code.length];
            }
        }

        return ans;
    }
}









--------------->>
Intuition
When faced with the problem of decrypting a circular array based on a key value 𝑘 I realized that directly summing up elements as specified could be inefficient due to the circular nature of the array. The challenge lies in accounting for the wrap-around without redundant calculations.🔄

Approach
I decided to use a sliding window technique, which adapts well to the problem's requirements:

For k>0: I sum the first k elements to initialize the window and then slide it across the array, adjusting the sum by subtracting the element that exits the window and adding the new element.📈

For k<0: I initialize the window with the last ∣k∣ elements and similarly adjust the window as it "slides" backward across the array.🔙

For k==0: The solution simplifies to replacing every element with 0, so I directly return an array filled with zeros.🚫

This approach ensures that I handle the array's circular nature efficiently using modulo operations to wrap the index.

Complexity
Time complexity:
O(n) because each element in the array is processed linearly, and each element is added to or removed from the sum only once.⏱️

Space complexity:
O(n) since I need additional space only for the output array, proportional to the size of the input.📦
