A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

For example, "Hello World", "HELLO", "hello world hello world" are all sentences.
Words consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.

A sentence is circular if:

The last character of a word is equal to the first character of the next word.
The last character of the last word is equal to the first character of the first word.
For example, "leetcode exercises sound delightful", "eetcode", "leetcode eats soul" are all circular sentences. However, "Leetcode is cool", "happy Leetcode", "Leetcode" and "I like Leetcode" are not circular sentences.

Given a string sentence, return true if it is circular. Otherwise, return false.

 

Example 1:

Input: sentence = "leetcode exercises sound delightful"
Output: true
Explanation: The words in sentence are ["leetcode", "exercises", "sound", "delightful"].
- leetcode's last character is equal to exercises's first character.
- exercises's last character is equal to sound's first character.
- sound's last character is equal to delightful's first character.
- delightful's last character is equal to leetcode's first character.
The sentence is circular.
Example 2:

Input: sentence = "eetcode"
Output: true
Explanation: The words in sentence are ["eetcode"].
- eetcode's last character is equal to eetcode's first character.
The sentence is circular.
Example 3:

Input: sentence = "Leetcode is cool"
Output: false
Explanation: The words in sentence are ["Leetcode", "is", "cool"].
- Leetcode's last character is not equal to is's first character.
The sentence is not circular.
 

Constraints:

1 <= sentence.length <= 500
sentence consist of only lowercase and uppercase English letters and spaces.
The words in sentence are separated by a single space.
There are no leading or trailing spaces.

SOLUTION---------------------->>>>>>>>>>>>>>>>>>>>>>>>


class Solution {
    public boolean isCircularSentence(String sentence) {
        //get the length of the sentence ;
        int n= sentence.length();
        //check the condition which says compare the first and last character of the sentence 
        if(sentence.charAt(0)!=sentence.charAt(n-1)){
            return false;
        }
        for(int i=1; i<n-1; i++){
            if(sentence.charAt(i)==' '){
                if(sentence.charAt(i-1)!=sentence.charAt(i+1)){
                    return false;
                }
            }

        }
        return true;

}}

-------------------------------->>>APPROACH--------------->>>>>>>>>>
Complexity
Time complexity: O(n)

Space complexity: O(1)

Intuition
A circular sentence has two key properties:

The first character of the first word matches the last character of the last word
For any two consecutive words, the last character of the first word matches the first character of the second word
Approach
First Character-Last Character Check:
Compare sentence[0] with sentence[n-1] to verify the circular property between first and last characters
This handles the "wrap-around" requirement efficiently
Adjacent Words Check:
Look for space characters as they indicate word boundaries

When a space is found at position i:

sentence[i-1] is the last character of current word
sentence[i+1] is the first character of next word
These must match for the sentence to be circular
Avoids splitting the string into words, making it memory efficient

Handles the checks in-place using character comparisons

Example
For "leetcode exercises sound"

First-Last check: 'l' matches 'd' ✓
At first space: 'e' matches 'e' ✓
At second space: 's' matches 's' ✓ Therefore, it's a circular sentence!
